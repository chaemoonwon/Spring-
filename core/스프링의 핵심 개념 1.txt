스프링의 핵심 개념 1

Spring은 자바 언어 기반의 프레임워크 => 객체 지향 언어
Spring은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크

Spring의 본질에 대한 고민 

좋은 객체 지향 이란 무엇인가?

객체들의 모임, 메세지를 주고 받고 협력, 
유연하고 변경이 용이(레고 블럭 조입하듯이) => 다형성(Polymorphism)


1. 다형성
- 역할과 구현으로 세상을 구분
- ex) 운전자(역할)는 자동차(역할)에 의존 => 구현( 테슬라, k3, 아반떼 등)
- 자동차의 역할만 수행할 수 있으면 어떤 자동차 이든지 구현 가능 => 클라이언트에게 영향을 주지 않고 새로운 기능 제공
- 역할을 여러가지로 구현이 가능하다. (역할을 다른 대상으로 대체가 가능 => 유연하고 변경이 용이)


- 클라이언트는 대상의 역할(인터페이스)만 알면 된다
- 클라이언트는 구현 대상의 내부 구조를 몰라도 됨.
- 클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않음
- 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않음

- 구현보다는 역할이 더 중요함

- 실행 시점에 유연하게 변경 가능
- 부모 타입을 자식 클래스에서 객체를 생성해 줄 수 있음.

다형성의 본질
- 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경 가능
- 다형성의 본질을 이해하려면 협력이라는 객체 사이의 관계에서 시작
- 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있음.

=> 확장 가능한 설계

한계
- 역할(인터페이스) 자체가 변하면, 클라이언트, 서버 모두 큰 변경이 발생
=> 인터페이스를 안정적으로 만드는게 중요하다.


스프링의 객체 지향

- 다형성을 극대화해서 이용할 수 있게 도와줌
- 제어의 역전(IOC), 의존관계 주입(DI)



