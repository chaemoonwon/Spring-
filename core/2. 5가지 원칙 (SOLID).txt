2. 5가지 원칙 (SOLID)


SRP : 단일 책임 원칙
OCP : 개방 - 폐쇄 원칙
LSP : 리스코프 치환 원칙
ISP : 인터페이스 분리 원칙
DIP : 의존관계 역전 원칙


SRP
- 중요한 기준은 변경	ex) UI 변경, 객체의 생성과 사용을 분리
- 변경이 있을 때 파급효과가 적으면 잘 지킨 것.

OCP
- 확장에는 열려있으나, 변경에는 닫혀 있어야 함.
- 다형성을 활용
- 인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현
- 문제점	:
	구현 객체를 변경하려면 클라이언트 코드를 변경해야 함. => 기존 코드를 변경
	이 문제를 해결하기 위해 객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요

LSP
- 프로그램 규약을 지켜야 함

ISP 
- 특정 클라이언트를 위한 인터페이스로 분리

DIP
- 역할에 의존해야지, 구현에 의존하면 안 된다.

정리
- 객체 지향의 핵심은 다형성
- 다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 같이 변경
- 다형성만으로는 OCP, DIP를 지킬 수 없음

