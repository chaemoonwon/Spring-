빈 생명주기 콜백

객체의 초기화와 종료 작업

App 실행 전에 미리 외부 네트워크와 미리 연결해서 Data를 로드하고,  종료 시점에는 모든 작업을 종료하는 과정에서 초기화와 종료 작업을 필요로 한다. => 클라이언트의 요청에 빠르게 응답하기 위해서.


외부 네트워크에 미리 연결하는 객체 connect(), 
연결을 해제 disconnect()

스프링 빈은 간단하게 다음과 같은 라이프사이클을 가진다.
- 객체 생성 -> 의존관계 주입


스프링은 의존관계 주입이 완료되면 스프링 빈에게 콜백 메서드를 통해서 초기화 시점을 알려주는 다양한 기능을 제공한다. 
또한 스프링은 스프링 컨테이너가 종료되기 직전에 소멸 콜백을 준다

스프링 빈의 이벤트 라이프사이클
- 스프링 컨테이너 생성 ->  스프링 빈 생성 ->  의존관계 주입 -> 초기화 콜백 -> 사용 -> 소멸전 콜백 -> 스프링 종료

초기화 콜백 : 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출
소멸전 콜백 : 빈이 소멸되기 직전에 호출


객체의 생성과 초기화를 분리하자. (단일 책임 원칙 , 동작하는 것은 별도의 초기화 메서드로 분리) 
생성자는 필수 정보(파라미터)를 받고, 메모리를 할당해서 객체를 생성하는 책임을 가진다. 
반면에 초기화는 이렇게 생성된 값들을 활용해서 외부 커넥션을 연결하는등 무거운 동작을 수행한다.
따라서 생성자 안에서 무거운 초기화 작업을 함께 하는 것 보다는 객체를 생성하는 부분과 초기화 하는 부분을 명확하게 나누는 것이 유지보수 관점에서 좋다. 
물론 초기화 작업이 내부 값들만 약간 변경하는 정도로 단순한 경우 생성자에서 한번에 처리하는게 좋을 수 있음.


스프링은 크게 3가지 방법으로 빈 생명주기 콜백을 지원한다.

인터페이스(InitializingBean, DisposableBean)
설정 정보에 초기화 메서드, 종료 메서드 지정
@PostConstruct, @PreDestroy 애노테이션 지원


