＃request 스코프 사용

동시에 여러 HTTP 요청이 오면 정확히 어떤 요청이 남긴 로그인지 구분하기 어렵다.
이럴때 사용하기 딱 좋은것이 바로 request 스코프이다.

로그를 출력하기 위한 MyLogger 클래스이다.
@Scope(value = "request") 를 사용해서 request 스코프로 지정했다. 
이제 이 빈은 HTTP 요청 당 하나 씩 생성되고, HTTP 요청이 끝나는 시점에 소멸된다.
이 빈이 생성되는 시점에 자동으로 @PostConstruct 초기화 메서드를 사용해서 uuid를 생성해서 저장해둔다. 
이 빈은 HTTP 요청 당 하나씩 생성되므로, uuid를 저장해두면 다른 HTTP 요청과 구분할 수 있다.
이 빈이 소멸되는 시점에 @PreDestroy 를 사용해서 종료 메시지를 남긴다.
requestURL은 이 빈이 생성되는 시점에는 알 수 없으므로, 외부에서 setter로 입력 받는다.



참고 : 인터셉터를 이용해서 공통 처리 할 수 있음.
requestURL을 MyLogger에 저장하는 부분은 컨트롤러 보다는 공통 처리가 가능한 스프링 인터셉터나
서블릿 필터 같은 곳을 활용하는 것이 좋다. 여기서는 예제를 단순화하고, 아직 스프링 인터셉터를 학습하지 않은
분들을 위해서 컨트롤러를 사용했다. 스프링 웹에 익숙하다면 인터셉터를 사용해서 구현해보자


문제
스프링 애플리케이션을 실행 시키면 오류가 발생한다. 
메시지 마지막에 싱글톤이라는 단어가 나오고…
스프링 애플리케이션을 실행하는 시점에 싱글톤 빈은 생성해서 주입이 가능하지만,
request 스코프 빈은 아직 생성되지 않는다. 
이 빈은 실제 고객의 요청이 와야 생성할 수 있다!


해결
ObjectProvider 덕분에 ObjectProvider.getObject() 를 호출하는 시점까지 request scope빈의
생성을 지연할 수 있다.
ObjectProvider.getObject() 를 호출하시는 시점에는 HTTP 요청이 진행중이므로 request scope빈
의 생성이 정상 처리된다.
ObjectProvider.getObject() 를 LogDemoController , LogDemoService에서 각각 한번씩 따로
호출해도 같은 HTTP 요청이면 같은 스프링 빈이 반환된다


＃ 스코프와 프록시

proxyMode = ScopedProxyMode.TARGET_CLASS 를 추가해주자. 
 - 적용 대상이 인터페이스가 아닌 클래스면 TARGET_CLASS 를 선택
 - 적용 대상이 인터페이스면 INTERFACES 를 선택

웹 프록시 동작 원리
MyLogger의 가짜 프록시 클래스를 만들어두고 HTTP request와 상관 없이 가짜 프록시 클래스를
다른 빈에 미리 주입해 둘 수 있다.
=> myLogger = class hello.core.common.MyLogger$$EnhancerBySpringCGLIB$$33658778

CGLIB라는 라이브러리로 내 클래스를 상속 받은 가짜 프록시 객체를 만들어서 주입한다.
이 가짜 프록시 객체는 실제 요청이 오면 그때 내부에서 실제 빈을 요청하는 위임 로직이 들어있다.
가짜 프록시 객체는 실제 request scope와는 관계가 없다. 
그냥 가짜이고, 내부에 단순한 위임 로직만 있고, 싱글톤 처럼 동작한다


핵심은 .....
Provider를 사용하든, 프록시를 사용하든 핵심 아이디어는 진짜 객체 조회를 꼭 필요한 시점까지 지연처리
한다는 점이다!!!!

